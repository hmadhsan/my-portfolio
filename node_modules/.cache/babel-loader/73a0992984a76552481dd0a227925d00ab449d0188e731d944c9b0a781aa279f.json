{"ast":null,"code":"import _slicedToArray from \"D:/my-portfolio/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nvar _s = $RefreshSig$();\nimport { useState } from \"react\";\nexport var useLocalStorage = function useLocalStorage(key, initialValue) {\n  _s();\n  // State to store our value\n  // Pass initial state function to useState so logic is only executed once\n  var _useState = useState(function () {\n      try {\n        // Get from local storage by key\n        var item = window.localStorage.getItem(key);\n        // Parse stored json or if none return initialValue\n        return item ? JSON.parse(item) : initialValue;\n      } catch (error) {\n        // If error also return initialValue\n        console.log(error);\n        return initialValue;\n      }\n    }),\n    _useState2 = _slicedToArray(_useState, 2),\n    storedValue = _useState2[0],\n    setStoredValue = _useState2[1];\n\n  // Return a wrapped version of useState's setter function that ...\n  // ... persists the new value to localStorage.\n  var setValue = function setValue(value) {\n    try {\n      // Allow value to be a function so we have same API as useState\n      var valueToStore = value instanceof Function ? value(storedValue) : value;\n      // Save state\n      setStoredValue(valueToStore);\n      // Save to local storage\n      window.localStorage.setItem(key, JSON.stringify(valueToStore));\n    } catch (error) {\n      // A more advanced implementation would handle the error case\n      console.log(error);\n    }\n  };\n  return [storedValue, setValue];\n};\n_s(useLocalStorage, \"z0XdM4TLkDZuzSOGq1lQIVlfpgk=\");","map":{"version":3,"names":["useState","useLocalStorage","key","initialValue","item","window","localStorage","getItem","JSON","parse","error","console","log","storedValue","setStoredValue","setValue","value","valueToStore","Function","setItem","stringify"],"sources":["D:/my-portfolio/src/hooks/useLocalStorage.js"],"sourcesContent":["import {useState} from \"react\";\r\n\r\nexport const useLocalStorage = (key, initialValue) => {\r\n  // State to store our value\r\n  // Pass initial state function to useState so logic is only executed once\r\n  const [storedValue, setStoredValue] = useState(() => {\r\n    try {\r\n      // Get from local storage by key\r\n      const item = window.localStorage.getItem(key);\r\n      // Parse stored json or if none return initialValue\r\n      return item ? JSON.parse(item) : initialValue;\r\n    } catch (error) {\r\n      // If error also return initialValue\r\n      console.log(error);\r\n      return initialValue;\r\n    }\r\n  });\r\n\r\n  // Return a wrapped version of useState's setter function that ...\r\n  // ... persists the new value to localStorage.\r\n  const setValue = value => {\r\n    try {\r\n      // Allow value to be a function so we have same API as useState\r\n      const valueToStore =\r\n        value instanceof Function ? value(storedValue) : value;\r\n      // Save state\r\n      setStoredValue(valueToStore);\r\n      // Save to local storage\r\n      window.localStorage.setItem(key, JSON.stringify(valueToStore));\r\n    } catch (error) {\r\n      // A more advanced implementation would handle the error case\r\n      console.log(error);\r\n    }\r\n  };\r\n\r\n  return [storedValue, setValue];\r\n};\r\n"],"mappings":";;AAAA,SAAQA,QAAQ,QAAO,OAAO;AAE9B,OAAO,IAAMC,eAAe,GAAG,SAAlBA,eAAe,CAAIC,GAAG,EAAEC,YAAY,EAAK;EAAA;EACpD;EACA;EACA,gBAAsCH,QAAQ,CAAC,YAAM;MACnD,IAAI;QACF;QACA,IAAMI,IAAI,GAAGC,MAAM,CAACC,YAAY,CAACC,OAAO,CAACL,GAAG,CAAC;QAC7C;QACA,OAAOE,IAAI,GAAGI,IAAI,CAACC,KAAK,CAACL,IAAI,CAAC,GAAGD,YAAY;MAC/C,CAAC,CAAC,OAAOO,KAAK,EAAE;QACd;QACAC,OAAO,CAACC,GAAG,CAACF,KAAK,CAAC;QAClB,OAAOP,YAAY;MACrB;IACF,CAAC,CAAC;IAAA;IAXKU,WAAW;IAAEC,cAAc;;EAalC;EACA;EACA,IAAMC,QAAQ,GAAG,SAAXA,QAAQ,CAAGC,KAAK,EAAI;IACxB,IAAI;MACF;MACA,IAAMC,YAAY,GAChBD,KAAK,YAAYE,QAAQ,GAAGF,KAAK,CAACH,WAAW,CAAC,GAAGG,KAAK;MACxD;MACAF,cAAc,CAACG,YAAY,CAAC;MAC5B;MACAZ,MAAM,CAACC,YAAY,CAACa,OAAO,CAACjB,GAAG,EAAEM,IAAI,CAACY,SAAS,CAACH,YAAY,CAAC,CAAC;IAChE,CAAC,CAAC,OAAOP,KAAK,EAAE;MACd;MACAC,OAAO,CAACC,GAAG,CAACF,KAAK,CAAC;IACpB;EACF,CAAC;EAED,OAAO,CAACG,WAAW,EAAEE,QAAQ,CAAC;AAChC,CAAC;AAAC,GAlCWd,eAAe"},"metadata":{},"sourceType":"module","externalDependencies":[]}